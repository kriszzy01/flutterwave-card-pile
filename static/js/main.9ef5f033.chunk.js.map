{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["handleDragDirection","cards","setCount","rotateAnglesRef","direction","this","getDirection","gsap","to","target","duration","x","includes","ease","count","forEach","card","index","rotate","current","App","useState","useRef","useEffect","registerPlugin","ScrollTrigger","Draggable","utils","toArray","from","autoAlpha","scale","stagger","force3D","scrollTrigger","trigger","start","create","type","onDragEnd","onDragEndParams","length","delay","zIndex","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qPAMA,SAASA,EAAoBC,EAAOC,EAAUC,GAC5C,IAAMC,EAAYC,KAAKC,eAEvBC,IAAKC,GAAGH,KAAKI,OAAQ,CACnBC,SAAU,GACVC,EAAGP,EAAUQ,SAAS,SAAW,KAAQ,IACzCC,KAAM,qBAGRX,GAAS,SAACY,GAAD,OAAWA,EAAQ,KAG5Bb,EAAMc,SAAQ,SAACC,EAAMC,GACnBV,IAAKC,GAAGQ,EAAM,CACZE,OAAQf,EAAgBgB,QAAQF,GAAS,IAG3Cd,EAAgBgB,QAAQF,GAASd,EAAgBgB,QAAQF,GAAS,KAItE,IA0EeG,EA1EH,WAAO,IAAD,EACUC,mBAAS,GADnB,mBACTP,EADS,KACFZ,EADE,KAEVC,EAAkBmB,iBAAO,CAAC,GAAI,GAAI,GAAI,EAAG,EAAG,IAqDlD,OAnDAC,qBAAU,WACRhB,IAAKiB,eAAeC,IAAeC,KACnC,IAAMzB,EAAQM,IAAKoB,MAAMC,QAAQ,UAEjCrB,IAAKsB,KAAK5B,EAAO,CACf6B,UAAW,EACXC,MAAO,GACPC,QAAS,IACTC,SAAS,EACTpB,KAAM,mBACNqB,cAAe,CACbC,QAAS,aACTC,MAAO,gBAIXV,IAAUW,OAAOpC,EAAO,CACtBqC,KAAM,IACNL,SAAS,EACTM,UAAWvC,EACXwC,gBAAiB,CAACvC,EAAOC,EAAUC,OAEpC,IAEHoB,qBAAU,WACR,IAAMtB,EAAQM,IAAKoB,MAAMC,QAAQ,UAE7Bd,IAAUb,EAAMwC,SAClBvC,EAAS,GAGTK,IAAKC,GAAGP,EAAO,CACbS,SAAU,GACVgC,MAAO,GACP/B,EAAG,EACHqB,QAAS,IACTnB,KAAM,iBACNoB,SAAS,IAIXhC,EAAMc,SAAQ,SAACC,EAAMC,GACnBV,IAAKC,GAAGQ,EAAM,CACZ2B,OAAgB,EAAR1B,EACRC,OAAQf,EAAgBgB,QAAQF,KAElCd,EAAgBgB,QAAU,CAAC,GAAI,GAAI,GAAI,EAAG,EAAG,SAGhD,CAACL,IAGF,qCACE,mCACE,+DACA,+CAGF,sBAAK8B,UAAU,YAAf,UACE,qBAAKA,UAAU,eACf,qBAAKA,UAAU,eACf,qBAAKA,UAAU,eACf,qBAAKA,UAAU,eACf,qBAAKA,UAAU,eACf,qBAAKA,UAAU,sBCnFRC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.9ef5f033.chunk.js","sourcesContent":["import React, { useEffect, useState, useRef } from \"react\";\nimport \"./App.css\";\nimport { gsap } from \"gsap\";\nimport { ScrollTrigger } from \"gsap/ScrollTrigger\";\nimport { Draggable } from \"gsap/Draggable\";\n\nfunction handleDragDirection(cards, setCount, rotateAnglesRef) {\n  const direction = this.getDirection(); //drag direction\n\n  gsap.to(this.target, {\n    duration: 0.3,\n    x: direction.includes(\"right\") ? 1000 : -1000,\n    ease: \"Power0.easeInOut\",\n  });\n\n  setCount((count) => count + 1); //track number of drags\n\n  //update rotate values\n  cards.forEach((card, index) => {\n    gsap.to(card, {\n      rotate: rotateAnglesRef.current[index] - 4,\n    });\n\n    rotateAnglesRef.current[index] = rotateAnglesRef.current[index] - 4;\n  });\n}\n\nconst App = () => {\n  const [count, setCount] = useState(0);\n  const rotateAnglesRef = useRef([20, 16, 12, 8, 4, 0]);\n\n  useEffect(() => {\n    gsap.registerPlugin(ScrollTrigger, Draggable);\n    const cards = gsap.utils.toArray(\".panel\");\n\n    gsap.from(cards, {\n      autoAlpha: 0,\n      scale: 0.4,\n      stagger: 0.08,\n      force3D: true,\n      ease: \"Power4.easeInOut\",\n      scrollTrigger: {\n        trigger: \".container\",\n        start: \"top center\",\n      },\n    });\n\n    Draggable.create(cards, {\n      type: \"x\",\n      force3D: true,\n      onDragEnd: handleDragDirection,\n      onDragEndParams: [cards, setCount, rotateAnglesRef],\n    });\n  }, []);\n\n  useEffect(() => {\n    const cards = gsap.utils.toArray(\".panel\");\n\n    if (count === cards.length) {\n      setCount(0); //Reset the count\n\n      //Return cards to original position\n      gsap.to(cards, {\n        duration: 0.3,\n        delay: 0.5,\n        x: 0,\n        stagger: 0.06,\n        ease: \"Power4.easeOut\",\n        force3D: true,\n      });\n\n      //Reset rotation and stacking order\n      cards.forEach((card, index) => {\n        gsap.to(card, {\n          zIndex: index * 2,\n          rotate: rotateAnglesRef.current[index],\n        });\n        rotateAnglesRef.current = [20, 16, 12, 8, 4, 0];\n      });\n    }\n  }, [count]);\n\n  return (\n    <>\n      <header>\n        <h1>Flutterwave's Value Card Pile</h1>\n        <p>Scroll Down</p>\n      </header>\n\n      <div className=\"container\">\n        <div className=\"panel box1\"></div>\n        <div className=\"panel box2\"></div>\n        <div className=\"panel box3\"></div>\n        <div className=\"panel box4\"></div>\n        <div className=\"panel box5\"></div>\n        <div className=\"panel box6\"></div>\n      </div>\n    </>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}